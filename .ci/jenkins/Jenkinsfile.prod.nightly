@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

pipeline {
    agent {
        label 'kie-rhel8 && podman && kie-mem24g && !built-in'
    }
    tools {
        maven 'kie-maven-3.9.3'
        jdk 'kie-jdk17'
        nodejs 'nodejs-16.2.0'
    }
    parameters {
        string(description: 'The UMB message version', name: 'UMB_VERSION', defaultValue: 'main')
        string(description: 'The product version, if not provided the kogito-runtimes main branch one will be use', name: 'PRODUCT_VERSION')
        string(description: 'The drools product version, if not provided the drools main branch one will be used', name: 'DROOLS_PRODUCT_VERSION')
        string(description: 'The config repository branch', name: 'CONFIG_BRANCH', defaultValue: 'master')
        booleanParam(description: 'If images should be built', name: 'BUILD_IMAGES', defaultValue: true)
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }
    environment {
        DATE_TIME_SUFFIX_FORMAT = 'yyyyMMddHH'
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    // Fetch versions from pom if not provided
                    env.PRODUCT_VERSION = "${PRODUCT_VERSION ?: parseVersionFromPom('kiegroup/kogito-runtimes', getBuildBranch())}"
                    env.DROOLS_PRODUCT_VERSION = "${DROOLS_PRODUCT_VERSION ?: parseVersionFromPom('kiegroup/drools', getDroolsBranch())}"

                    // Needed by Kogito Apps
                    setupCypressEnv('12.17.0')
                }
            }
        }
        stage('Install build-chain tool') {
            steps {
                script {
                    println "[INFO] Installing build-chain tool"
                    sh "npm install -g @kie/build-chain-action${env.NPM_REGISTRY_URL ? " -registry=${NPM_REGISTRY_URL}" : ''}"

                    sh "npm list -g | grep build-chain"
                }
            }
        }
        stage('Clone build configuration repo') {
            steps {
                script {
                    def currentBranch = getBuildConfigBranch()
                    println "Checking out ${env.BUILD_CONFIGURATION_REPO_URL}:${currentBranch} into build_config folder"
                    sh "git clone -b ${currentBranch} --single-branch ${env.BUILD_CONFIGURATION_REPO_URL} build_config"

                    // export PME parameters and build scripts from nightly build config
                    def buildConfigAdditionalVariables = [
                        'productVersion': env.PRODUCT_VERSION,
                        'droolsProductVersion': env.DROOLS_PRODUCT_VERSION
                    ]
                    pmebuild.parseBuildConfig("$WORKSPACE/build_config/openshift-serverless-logic/nightly", buildConfigAdditionalVariables)

                    def PME_BUILD_VARIABLES = env.PME_BUILD_VARIABLES.split(';').collect{ it.split('=')}.inject([:]) {map, item -> map << [(item.length == 2 ? item[0] : null): (item.length == 2 ? item[1] : null)]}

                    // export Quarkus community versions
                    env.QUARKUS_VERSION_COMMUNITY = PME_BUILD_VARIABLES['quarkusVersionCommunity']
                    env.QUARKUS_VERSION = PME_BUILD_VARIABLES['quarkusVersion'].replaceAll("\\{\\{.*\\}\\}", env.QUARKUS_VERSION_COMMUNITY)
                    env.QUARKUS_PLATFORM_VERSION = PME_BUILD_VARIABLES['quarkusPlatformVersion'].replaceAll("\\{\\{.*\\}\\}", env.QUARKUS_VERSION_COMMUNITY)

                    sh 'printenv'
                }
            }
        }
        stage('Build Nightly projects') {
            steps {
                script {
                    def pipelineHelper = new PipelineHelper(this)
                    pipelineHelper.retry(
                    {
                        withCredentials([string(credentialsId: "kie-ci1-token", variable: 'GITHUB_TOKEN')]) {
                            def SETTINGS_XML_ID = 'osl-prod-main'
                            def buildBranch = getBuildBranch()
                            def definitionFile = "https://raw.githubusercontent.com/\\\${GROUP:kiegroup}/kogito-pipelines/${getDefinitionFileBranch()}/.ci/nightly-build-config.yaml"
                            
                            configFileProvider([configFile(fileId: "${SETTINGS_XML_ID}", variable: 'PME_MAVEN_SETTINGS_XML')]) {
                                sh "build-chain build branch --token=${GITHUB_TOKEN} -f ${definitionFile} -b ${buildBranch} -o bc -p kiegroup/kogito-runtimes --fullProjectDependencyTree --skipParallelCheckout"
                            }
                        }
                    }, 2, 480*60)
                }
            }
        }
        stage ('Initialize images') {
            steps {
                script {
                    // Common variables
                    env.NIGHTLY_BRANCH_NAME = 'openshift-serverless-nightly-rhel-8'
                    env.ARTIFACTS_VERSION = "${env.PRODUCT_VERSION}.redhat-${env.DATE_TIME_SUFFIX}"
                    env.M2_FOLDER = '/home/jenkins/.m2/repository'
                    env.IMAGES_REPOSITORY_PATH = "${env.WORKSPACE}/bc/kiegroup_kogito-images"
                    env.OPERATOR_REPOSITORY_PATH = "${env.WORKSPACE}/bc/kiegroup_kogito-serverless-operator"
                    env.SLEEP_TIME = '30' // required as cekit-cache command fails if many invocations at the same time

                    // Images names
                    env.DATA_INDEX_EPHEMERAL = 'data-index-ephemeral'
                    env.DATA_INDEX_POSTGRESQL = 'data-index-postgresql'
                    env.JOBS_SERVICE_EPHEMERAL = 'jobs-service-ephemeral'
                    env.JOBS_SERVICE_POSTGRESQL = 'jobs-service-postgresql'
                    env.SWF_BUILDER = 'swf-builder'
                    env.SWF_DEVMODE = 'swf-devmode'
                    env.OPERATOR = 'operator'

                    // Images registries placeholders
                    env.DATA_INDEX_EPHEMERAL_REGISTRY = ''
                    env.DATA_INDEX_POSTGRESQL_REGISTRY = ''
                    env.JOBS_SERVICE_EPHEMERAL_REGISTRY = ''
                    env.JOBS_SERVICE_POSTGRESQL_REGISTRY = ''
                    env.SWF_BUILDER_REGISTRY = ''
                    env.SWF_DEVMODE_REGISTRY = ''
                    env.OPERATOR_REGISTRY = ''
                }
            }
        }
        stage ('Build images') {
            when {
                expression { return params.BUILD_IMAGES }
            }
            parallel {
                stage('Data Index Ephemeral image') {
                    steps {
                        script {
                            sleep(Integer.parseInt(env.SLEEP_TIME) * 0)

                            def descriptorFile = 'prod-logic-data-index-ephemeral-rhel8-image.yaml'
                            // Map with artifact path required in image module.yaml and the name in module.yaml
                            def artifacts = ["${env.M2_FOLDER}/org/kie/kogito/data-index-service-inmemory/${env.ARTIFACTS_VERSION}/data-index-service-inmemory-${env.ARTIFACTS_VERSION}-image-build.zip": "data-index-service-inmemory-image-build.zip"]

                            env.DATA_INDEX_EPHEMERAL_REGISTRY = buildImage(env.DATA_INDEX_EPHEMERAL, descriptorFile, env.NIGHTLY_BRANCH_NAME, artifacts, env.IMAGES_REPOSITORY_PATH)
                        }
                    }
                }
                stage('Data Index Postgresql image') {
                    steps {
                        script {
                            sleep(Integer.parseInt(env.SLEEP_TIME) * 1)

                            def descriptorFile = 'prod-logic-data-index-postgresql-rhel8-image.yaml'
                            // Map with artifact path required in image module.yaml and the name in module.yaml
                            def artifacts = ["${env.M2_FOLDER}/org/kie/kogito/data-index-service-postgresql/${env.ARTIFACTS_VERSION}/data-index-service-postgresql-${env.ARTIFACTS_VERSION}-image-build.zip": "data-index-service-postgresql-image-build.zip"]

                            env.DATA_INDEX_POSTGRESQL_REGISTRY = buildImage(env.DATA_INDEX_POSTGRESQL, descriptorFile, env.NIGHTLY_BRANCH_NAME, artifacts, env.IMAGES_REPOSITORY_PATH)
                        }
                    }
                }
                stage('Jobs Service Ephemeral image') {
                    steps {
                        script {
                            sleep(Integer.parseInt(env.SLEEP_TIME) * 2)

                            def descriptorFile = 'prod-logic-jobs-service-ephemeral-rhel8-image.yaml'
                            // Map with artifact path required in image module.yaml and the name in module.yaml
                            def artifacts = ["${env.M2_FOLDER}/org/kie/kogito/jobs-service-inmemory/${env.ARTIFACTS_VERSION}/jobs-service-inmemory-${env.ARTIFACTS_VERSION}-image-build.zip": "jobs-service-inmemory-image-build.zip"]

                            env.JOBS_SERVICE_EPHEMERAL_REGISTRY = buildImage(env.JOBS_SERVICE_EPHEMERAL, descriptorFile, env.NIGHTLY_BRANCH_NAME, artifacts, env.IMAGES_REPOSITORY_PATH)
                        }
                    }
                }
                stage('Jobs Service Postgresql image') {
                    steps {
                        script {
                            sleep(Integer.parseInt(env.SLEEP_TIME) * 3)

                            def descriptorFile = 'prod-logic-jobs-service-postgresql-rhel8-image.yaml'
                            // Map with artifact path required in image module.yaml and the name in module.yaml
                            def artifacts = ["${env.M2_FOLDER}/org/kie/kogito/jobs-service-postgresql/${env.ARTIFACTS_VERSION}/jobs-service-postgresql-${env.ARTIFACTS_VERSION}-image-build.zip": "jobs-service-postgresql-image-build.zip"]

                            env.JOBS_SERVICE_POSTGRESQL_REGISTRY = buildImage(env.JOBS_SERVICE_POSTGRESQL, descriptorFile, env.NIGHTLY_BRANCH_NAME, artifacts, env.IMAGES_REPOSITORY_PATH)
                        }
                    }
                }
                stage('SWF Builder image') {
                    steps {
                        script {
                            sleep(Integer.parseInt(env.SLEEP_TIME) * 4)

                            def descriptorFile = 'prod-logic-swf-builder-rhel8-image.yaml'
                            // Map with artifact path required in image module.yaml and the name in module.yaml
                            def artifacts = ["${env.M2_FOLDER}/org/kie/kogito/kogito-builder-quarkus-app/${env.ARTIFACTS_VERSION}/kogito-builder-quarkus-app-${env.ARTIFACTS_VERSION}-image-build.zip": "kogito-builder-quarkus-app-image-build.zip",
                                            "${env.M2_FOLDER}/org/kie/kogito/kogito-builder-maven-repository/${env.ARTIFACTS_VERSION}/kogito-builder-maven-repository-${env.ARTIFACTS_VERSION}-image-build.zip": "kogito-builder-maven-repository-image-build.zip"
                                            ]

                            env.SWF_BUILDER_REGISTRY = buildImage(env.SWF_BUILDER, descriptorFile, env.NIGHTLY_BRANCH_NAME, artifacts, env.IMAGES_REPOSITORY_PATH)
                        }
                    }
                }
                stage('SWF Devmode image') {
                    steps {
                        script {
                            sleep(Integer.parseInt(env.SLEEP_TIME) * 5)

                            def descriptorFile = 'prod-logic-swf-devmode-rhel8-image.yaml'
                            // Map with artifact path required in image module.yaml and the name in module.yaml
                            def artifacts = ["${env.M2_FOLDER}/org/kie/kogito/kogito-devmode-quarkus-app/${env.ARTIFACTS_VERSION}/kogito-devmode-quarkus-app-${env.ARTIFACTS_VERSION}-image-build.zip": "kogito-devmode-quarkus-app-image-build.zip",
                                            "${env.M2_FOLDER}/org/kie/kogito/kogito-devmode-maven-repository/${env.ARTIFACTS_VERSION}/kogito-devmode-maven-repository-${env.ARTIFACTS_VERSION}-image-build.zip": "kogito-devmode-maven-repository-image-build.zip"
                                            ]

                            env.SWF_DEVMODE_REGISTRY = buildImage(env.SWF_DEVMODE, descriptorFile, env.NIGHTLY_BRANCH_NAME, artifacts, env.IMAGES_REPOSITORY_PATH)
                        }
                    }
                }
                stage('Operator image') {
                    steps {
                        script {
                            sleep(Integer.parseInt(env.SLEEP_TIME) * 6)

                            def descriptorFile = 'images/prod-operator-image.yaml'
                            env.OPERATOR_REGISTRY = buildOperator(descriptorFile, env.NIGHTLY_BRANCH_NAME, env.OPERATOR_REPOSITORY_PATH)
                        }
                    }
                }

            }
        }
        stage('Upload maven repository') {
            steps {
                script {
                    echo "[INFO] Start uploading ${env.WORKSPACE}/deployDirectory"
                    if(fileExists("${env.WORKSPACE}/deployDirectory")){
                        def destDir = "${env.WORKSPACE}/deployDirectoryFinal/openshift-serverless-logic-${PRODUCT_VERSION}-maven-repository/maven-repository/"
                        sh "mkdir -p ${destDir}"
                        sh "mv ${env.WORKSPACE}/deployDirectory/* ${destDir}"
                        dir("${env.WORKSPACE}/deployDirectoryFinal") {
                            sh "zip -r maven-repository-${env.DATE_TIME_SUFFIX} ."
                            def relativeFile = "rhoss/rhoss-logic-${PRODUCT_VERSION}.nightly"
                            def folder="${env.RCM_GUEST_FOLDER}/${relativeFile}"

                            util.withKerberos('rhba-prod-keytab') {
                                sh "ssh 'rhba-prod@${env.RCM_HOST}' 'mkdir -p ${folder}'"
                                sh "rsync -rlp --info=progress2 maven-repository-${env.DATE_TIME_SUFFIX}.zip rhba-prod@${env.RCM_HOST}:staging/${relativeFile}"
                            }
                        }
                    }
                }
            }
        }
        stage ('Extract Git Information') {
            steps {
                script {
                    def projectFolders = sh(returnStdout: true, script: "ls ${env.WORKSPACE}/bc").trim().split("\n")
                    for (f in projectFolders) {
                        dir("${env.WORKSPACE}/bc/${f}") {
                            def projectName = f.replace("_", "/")
                            // extract git infos
                            util.storeGitInformation(projectName)
                            env.ALREADY_BUILT_PROJECTS = "${env.ALREADY_BUILT_PROJECTS ?: ''}${projectName};"

                            def sanitizedProjectName = f.replaceAll('/', '_').replaceAll('-', '_')
                            def buildScript = env["PME_BUILD_SCRIPT_${sanitizedProjectName}"]
                            def pomPath = maven.getProjectPomFromBuildCmd(buildScript)
                            if (new File(pomPath).exists()) {
                                env["VERSION_${f}"] = maven.mvnGetVersionProperty(new MavenCommand(this).withProperty('productized'), 'project.version', pomPath)
                            }
                        }
                    }
                    
                    sh 'printenv'
                }
            }
        }
        stage ('Send UMB Message to QE.') {
            steps {
                script {
                    echo '[INFO] Sending OPENSHIFT SERVERLESS LOGIC UMB message to QE.'

                    def mavenRepositoryFileUrl = "${env.STAGING_SERVER_URL}/rhoss/rhoss-logic-${PRODUCT_VERSION}.nightly/maven-repository-${env.DATE_TIME_SUFFIX}.zip"
                    def topic = "VirtualTopic.qe.ci.ba.openshift-serverless-logic.${env.UMB_VERSION}.nightly.trigger"
                    def eventType = "openshift-serverless-logic-${env.UMB_VERSION}-nightly-qe-trigger"
                    def messageBody = getMessageBody(
                        mavenRepositoryFileUrl, 
                        env.ALREADY_BUILT_PROJECTS,
                        ['serverlesslogic': env['VERSION_kiegroup_kogito-runtimes'], 'serverlesslogic-rhba': env['VERSION_kiegroup_kogito-runtimes'], 'drools': env.VERSION_kiegroup_drools, 'platform.quarkus.bom': env.QUARKUS_PLATFORM_VERSION, 'quarkus.bom': env.QUARKUS_VERSION],
                        ["${env.DATA_INDEX_EPHEMERAL}": env.DATA_INDEX_EPHEMERAL_REGISTRY, "${env.DATA_INDEX_POSTGRESQL}": env.DATA_INDEX_POSTGRESQL_REGISTRY, "${env.JOBS_SERVICE_EPHEMERAL}": env.JOBS_SERVICE_EPHEMERAL_REGISTRY, "${JOBS_SERVICE_POSTGRESQL}": env.JOBS_SERVICE_POSTGRESQL_REGISTRY,
                            "${env.SWF_BUILDER}": env.SWF_BUILDER_REGISTRY, "${env.SWF_DEVMODE}": env.SWF_DEVMODE_REGISTRY, "${env.OPERATOR}": env.OPERATOR_REGISTRY],
                        gitHashesToCollection(env.GIT_INFORMATION_HASHES)
                    )
                    echo "[INFO] Message Body: ${messageBody}"
                    echo "[INFO] Topic: ${topic}"
                    echo "[INFO] Event Type: ${eventType}"
                    build job: env.SEND_UMB_MESSAGE_JOB_PATH, parameters: [
                            [$class: 'StringParameterValue', name: 'MESSAGE_BODY', value: messageBody],
                            [$class: 'StringParameterValue', name: 'TOPIC', value: topic],
                            [$class: 'StringParameterValue', name: 'EVENT_TYPE', value: eventType]
                    ]
                    echo '[SUCCESS] Message was successfully sent.'
                }
            }
        }
    }
    post {
        failure {
            emailext body: 'OPENSHIFT SERVERLESS LOGIC ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} \n' +
                    ' \n' +
                    '${BUILD_LOG, maxLines=750}', subject: 'OPENSHIFT SERVERLESS LOGIC ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        unstable {
            emailext body: 'OPENSHIFT SERVERLESS LOGIC ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} \n' +
                    ' \n' +
                    'Failed tests: ${BUILD_URL}/testReport \n' +
                    ' \n' +
                    '${BUILD_LOG, maxLines=750}', subject: 'OPENSHIFT SERVERLESS LOGIC ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        fixed {
            emailext body: 'OPENSHIFT SERVERLESS LOGIC ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL}', subject: 'OPENSHIFT SERVERLESS LOGIC ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        always {
            echo 'Archiving maven logs...'
            archiveArtifacts artifacts: '*.maven.log', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true
        }
        cleanup {
            cleanWs()
        }
    }
}

def buildOperator(String descriptorFile, String nightlyBranchName, String operatorRepository) {
    // Create a different folder for operator, otherwise dir() will mess up with folders and impact other steps of pipeline
    sh "cp -rp ${operatorRepository} ${env.WORKSPACE}/operator_repo"
    dir("${env.WORKSPACE}/operator_repo") {
        println "Building operator"

        // Remove go work files due to cachito limitation and push changes to  a temporary prod branch
        def prodBranch = "main-prod-nightly"
        if (githubscm.isBranchExist("origin", prodBranch)) {
            githubscm.removeRemoteBranch("origin", prodBranch)
        }
        githubscm.createBranch(prodBranch)
        sh "rm -f go.work go.work.sum"
        githubscm.commitChanges("remove go work files due to cachito limitation")
        githubscm.pushObject("origin", prodBranch)

        // Replace branch and ref in descriptor file
        sh """sed -i "s/branch:.*/branch: ${nightlyBranchName}/g" ${descriptorFile}"""
        def reference = githubscm.getCommitHash()
        sh """sed -i "s/ref:.*/ref: ${reference}/g" ${descriptorFile}"""
        println "Diff of ${descriptorFile} after replacing branch name and ref"
        sh "git diff ${descriptorFile}"

        println 'Using cekit version'
        util.runWithPythonVirtualEnv('cekit --version', 'cekit')

        util.withKerberos('rhba-osbs-builder-keytab') {
            def cekitBuildCmd = "cekit --redhat --descriptor ${descriptorFile} build osbs --user rhba-osbs-builder -y"
            util.runWithPythonVirtualEnv("${cekitBuildCmd} | tee operator-build-log.txt", 'cekit')
        }

        def imageRegistry = sh(script: "brew call --json-output getTaskResult \$(cat operator-build-log.txt | grep -oP '(?<=Task ).*(?= was)') | jq -nre 'input.repositories[0]'", returnStdout: true)
        return imageRegistry.trim()
    }
}

def buildImage(String imageName, String descriptorFile, String nightlyBranchName, Map<String, String> artifacts, String imagesRepository) {
    // Create a different folder for each image during the build, otherwise dir() will mess up the builds during parallel run
    sh "cp -rp ${imagesRepository} ${env.WORKSPACE}/${imageName}_repo"
    dir("${env.WORKSPACE}/${imageName}_repo") {
        println "Building image ${imageName}"

        sh """sed -i "s/branch:.*/branch: ${nightlyBranchName}/g" ${descriptorFile}"""
        println "Diff of ${descriptorFile} after replacing branch name"
        sh "git diff ${descriptorFile}"

        println 'Using cekit version'
        util.runWithPythonVirtualEnv('cekit --version', 'cekit')

        def overrides = ''
        artifacts.each { artifactPath, overridesName ->
            def md5sum = sh(script: "md5sum ${artifactPath} | cut -d' ' -f 1", returnStdout: true).trim()
            overrides += " --overrides \"artifacts: [{name: ${overridesName}, md5: ${md5sum}}]\""
            println "Adding file ${artifactPath} to cekit cache"
            util.runWithPythonVirtualEnv("cekit-cache add --md5=${md5sum} ${artifactPath}", 'cekit')
        }

        util.withKerberos('rhba-osbs-builder-keytab') {
            def cekitBuildCmd = "cekit --redhat --descriptor ${descriptorFile} build ${overrides} osbs --user rhba-osbs-builder -y"
            util.runWithPythonVirtualEnv("${cekitBuildCmd} | tee ${imageName}-build-log.txt", 'cekit')
        }

        def imageRegistry = sh(script: "brew call --json-output getTaskResult \$(cat ${imageName}-build-log.txt | grep -oP '(?<=Task ).*(?= was)') | jq -nre 'input.repositories[0]'", returnStdout: true)
        return imageRegistry.trim()
    }
}

def getMessageBody(String mavenRepositoryFileUrl, String alreadyBuiltProjects, Map<String, String> versions, Map<String, String> imagesRegistries, Map<String, String> scmHashes) {
    def alreadyBuiltProjectsArray = (alreadyBuiltProjects ?: '').split(";")
    return """
{
    "maven_repository_file_url": "${mavenRepositoryFileUrl}",
    "version": ${new groovy.json.JsonBuilder(versions).toString()},
    "image": ${new groovy.json.JsonBuilder(imagesRegistries).toString()},
    "scm_hash": ${new groovy.json.JsonBuilder(scmHashes).toString()},
    "built_projects": ${new groovy.json.JsonBuilder(alreadyBuiltProjectsArray).toString()}
}"""
}

def setupCypressEnv(String cypressVersion) {
    if (env.CYPRESS_BINARY_URL) {
        env.CYPRESS_INSTALL_BINARY = "${CYPRESS_BINARY_URL}/cypress-${cypressVersion}.zip"
    }
}

def gitHashesToCollection(String gitInformationHashes) {
    return gitInformationHashes.replaceAll(/([\w\d\-\_\.]*\/)([\w\d\-\_\.]*)/,'$2').split(';').findAll { it.split('=').size() }.collectEntries{ [it.split('=')[0], it.split('=')[1]] }
}

String getBuildConfigBranch() {
  return env.CONFIG_BRANCH ?: env.DEFAULT_CONFIG_BRANCH ?: env.BRANCH_NAME ?: env.GIT_BRANCH
}

String getBuildBranch() {
  // Fallback to main if none exist
  return env.CHANGE_BRANCH ?: env.BRANCH_NAME ?: env.GIT_BRANCH ?: 'main'
}

String getDroolsBranch() {
    return calculateKieRepoBranch(getBuildBranch())
}

String getDefinitionFileBranch() {
  // Fallback to getBuildBranch if DEFINITION_FILE_BRANCH not set
  return env.DEFINITION_FILE_BRANCH ?: getBuildBranch()
}

String calculateKieRepoBranch(String branch) {
    /* The Drools/OptaPlanner major version is shifted by 7 from the Kogito major version:
    Kogito 1.x.y -> Drools 8.x.y. 
    Kogito 1.x.y -> OptaPlanner 8.x.y. */
    int majorVersionShift = 7
    String [] branchSplit = branch.split("\\.")
    if (branchSplit.length == 3) {
        Integer optaplannerMajorVersion = Integer.parseInt(branchSplit[0]) + majorVersionShift
        return "${optaplannerMajorVersion}.${branchSplit[1]}.${branchSplit[2]}"
    } else {
       return branch
    }
}

// Parse version from main branch of the given project
//      * project: in the form of owner/repository
def parseVersionFromPom(String project, String branch) {
    def pomFilename = "${project.replaceAll("/", "_")}_pom.xml"
    def pomPath = "${env.WORKSPACE}/${pomFilename}"

    sh "curl https://raw.githubusercontent.com/${project}/${branch}/pom.xml -o ${pomPath}"
    def pom = readMavenPom file: pomPath
    return pom.getVersion().replaceAll('-SNAPSHOT', '')
}
